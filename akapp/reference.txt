//
//  WallPicturesViewController.swift
//  ParseTutorial
//
//  Created by Ron Kliffer on 3/6/15.
//  Copyright (c) 2015 Ron Kliffer. All rights reserved.
//

import UIKit
import Parse

class WallPicturesViewController: UIViewController {

@IBOutlet weak var wallScroll: UIScrollView!

// MARK: - Lifecycle
override func viewDidLoad() {
super.viewDidLoad()

// Do any additional setup after loading the view.
}

override func viewWillAppear(animated: Bool) {
super.viewWillAppear(animated)

//Clean the scroll view
cleanWall()

//Reload the wall
getWallImages()
}

// MARK: - Wall
func cleanWall()
{
for viewToRemove in wallScroll.subviews {
viewToRemove.removeFromSuperview()
}
}

func getWallImages() {
//1
let query = WallPost.query()!
query.findObjectsInBackgroundWithBlock { objects, error in
if error == nil {
//2
if let objects = objects as? [WallPost] {
self.loadWallViews(objects)
}
} else if let error = error {
//3
self.showErrorView(error)
}
}
}

func loadWallViews(objects: [WallPost]) {
//Clean the scroll view
cleanWall()

var originY: CGFloat = 0
for wallPost: WallPost in objects {

//1
let wallView = UIView(frame: CGRect(x: 0, y: originY, width: self.wallScroll.frame.size.width, height: 270))

//2
wallPost.image.getDataInBackgroundWithBlock { data, error in
if let data = data {
if let image = UIImage(data: data) {

//3
//Add the image
let imageView = UIImageView(image: image)
imageView.frame = CGRect(x: 10, y: 10, width: wallView.frame.size.width - 20, height: 200)
imageView.contentMode = UIViewContentMode.ScaleAspectFit
wallView.addSubview(imageView)

//4
//Add the info label (User and creation date)
let creationDate = wallPost.createdAt
let dateFormatter = NSDateFormatter()
dateFormatter.dateFormat = "MM/dd/yyyy"

let infoLabel = UILabel(frame: CGRect(x: 10, y: 220, width: 0, height: 0))
let dateString = dateFormatter.stringFromDate(creationDate!)

if let username = wallPost.user.username {
infoLabel.text = "by: \(username), \(dateString)"
} else {
infoLabel.text = "by anonymous: , \(dateString)"
}
infoLabel.font = UIFont(name: "HelveticaNeue", size: 12)
infoLabel.textColor = UIColor.blackColor()
infoLabel.backgroundColor = UIColor.clearColor()
infoLabel.sizeToFit()
wallView.addSubview(infoLabel)

//5
//Add the comment label (User and creation date)
let commentLabel = UILabel(frame: CGRect(x: 10, y: CGRectGetMaxY(infoLabel.frame)+5, width:0, height: 0))
commentLabel.text = wallPost.comment
commentLabel.font = UIFont(name: "HelveticaNeue", size: 16)
commentLabel.textColor = UIColor.blackColor()
commentLabel.backgroundColor = UIColor.clearColor()
commentLabel.sizeToFit()
wallView.addSubview(commentLabel)
}
}
}

//6
self.wallScroll.addSubview(wallView)
originY += 270
}
//7
self.wallScroll.contentSize.height = CGFloat(originY)
}

// MARK: - Actions
@IBAction func logOutPressed(sender: AnyObject) {
PFUser.logOut()
navigationController?.popToRootViewControllerAnimated(true)
}
}

func splitViewController(splitViewController: UISplitViewController, collapseSecondaryViewController secondaryViewController:UIViewController, ontoPrimaryViewController primaryViewController:UIViewController) -> Bool {
guard let secondaryAsNavController = secondaryViewController as? UINavigationController else { return false }
guard let topAsDetailController = secondaryAsNavController.topViewController as? DetailViewController else { return false }
if topAsDetailController.detailItem == nil {
// Return true to indicate that we have handled the collapse by doing nothing; the secondary controller will be discarded.
return true
}
return false
}


func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {
let path = NSBundle.mainBundle().pathForResource("keys", ofType: "plist")
let keydict = NSDictionary(contentsOfFile: path!) as? [String: String]
let ApplicationID:String = (keydict?["ApplicationID"])!
let clientKey:String = (keydict?["clientKey"])!
Parse.enableLocalDatastore()
// Initialize Parse.
Parse.setApplicationId(ApplicationID,clientKey:clientKey)
// [Optional] Track statistics around application opens.
PFAnalytics.trackAppOpenedWithLaunchOptions(launchOptions)
// Override point for customization after application launch.
//        let splitViewController = self.window!.rootViewController as! UISplitViewController
//        let navigationController = splitViewController.viewControllers[splitViewController.viewControllers.count-1] as! UINavigationController
//        navigationController.topViewController!.navigationItem.leftBarButtonItem = splitViewController.displayModeButtonItem()
//        splitViewController.delegate = self
return true
}
//
//  MasterViewController.swift
//  akapp
//
//  Created by Akshay on 12/3/15.
//  Copyright © 2015 cornell university. All rights reserved.
//

import UIKit
import Parse


class MasterViewController: UITableViewController {

var detailViewController: DetailViewController? = nil
var objects = [AnyObject]()

override func viewDidLoad() {
super.viewDidLoad()
// Do any additional setup after loading the view, typically from a nib.
self.navigationItem.leftBarButtonItem = self.editButtonItem()
let addButton = UIBarButtonItem(barButtonSystemItem: .Add, target: self, action: "insertNewObject:")
self.navigationItem.rightBarButtonItem = addButton
if let split = self.splitViewController {
let controllers = split.viewControllers
self.detailViewController = (controllers[controllers.count-1] as! UINavigationController).topViewController as? DetailViewController
}
}

override func viewWillAppear(animated: Bool) {
self.clearsSelectionOnViewWillAppear = self.splitViewController!.collapsed
super.viewWillAppear(animated)
}

override func didReceiveMemoryWarning() {
super.didReceiveMemoryWarning()
}

func insertNewObject(sender: AnyObject) {
let d = NSDate();
objects.insert(d, atIndex: 0)
let indexPath = NSIndexPath(forRow: 0, inSection: 0)
self.tableView.insertRowsAtIndexPaths([indexPath], withRowAnimation: .Automatic)
let testObject = PFObject(className: "TestObject")
testObject["foo"] = "\(d.description)"
testObject.saveInBackgroundWithBlock { (success: Bool, error: NSError?) -> Void in
print("Object has been saved.")
}

}


override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
if segue.identifier == "showDetail" {
if let indexPath = self.tableView.indexPathForSelectedRow {
let object = objects[indexPath.row] as! NSDate
let controller = (segue.destinationViewController as! UINavigationController).topViewController as! DetailViewController
controller.detailItem = object
controller.navigationItem.leftBarButtonItem = self.splitViewController?.displayModeButtonItem()
controller.navigationItem.leftItemsSupplementBackButton = true
}
}
}

// MARK: - Table View

override func numberOfSectionsInTableView(tableView: UITableView) -> Int {
return 1
}

override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
return objects.count
}

override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
let cell = tableView.dequeueReusableCellWithIdentifier("Cell", forIndexPath: indexPath)

let object = objects[indexPath.row] as! NSDate
cell.textLabel!.text = object.description
return cell
}

override func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {
// Return false if you do not want the specified item to be editable.
return true
}

override func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath) {
if editingStyle == .Delete {
objects.removeAtIndex(indexPath.row)
tableView.deleteRowsAtIndexPaths([indexPath], withRowAnimation: .Fade)
} else if editingStyle == .Insert {
// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.
}
}

}

//
//  DetailViewController.swift
//  akapp
//
//  Created by Akshay on 12/3/15.
//  Copyright © 2015 cornell university. All rights reserved.
//

import UIKit

class DetailViewController: UIViewController {

@IBOutlet weak var detailDescriptionLabel: UILabel!
@IBOutlet var switchDetail: UISwitch!
@IBOutlet var dressImage: UIImageView!
@IBOutlet var detailWebView: UIWebView!



var detailItem: AnyObject? {
didSet {
// Update the view.
self.configureView()
}
}

@IBAction func switchDetailChange(sender: UISwitch) {
if sender.on
{
self.dressImage.frame = CGRectMake(self.dressImage.frame.origin.x,self.dressImage.frame.origin.y, 200, 200);
let url = NSURL(string:"http://www.google.com")
let request = NSURLRequest(URL: url!)
detailWebView.loadRequest(request)
}
}

func configureView(count:Int = 0) {
// Update the user interface for the detail item.
if let detail = self.detailItem {
if let label = self.detailDescriptionLabel {
label.text = "\(dressImage.bounds.height) \(count) \(detail.description)"
}
}
}

override func viewDidLoad() {
super.viewDidLoad()
// Do any additional setup after loading the view, typically from a nib.
self.configureView()
}

override func didReceiveMemoryWarning() {
super.didReceiveMemoryWarning()
// Dispose of any resources that can be recreated.
}

@IBAction func handlePan(recognizer:UIPanGestureRecognizer) {
let translation = recognizer.translationInView(self.view)
if let view = recognizer.view {
view.center = CGPoint(x:view.center.x + translation.x,
y:view.center.y + translation.y)
}
recognizer.setTranslation(CGPointZero, inView: self.view)
}



}



